---
import AdminLayout from "@/layouts/AdminLayout.astro";
import * as websiteSql from "@/sql/websiteSql"
import * as storageSql from "@/sql/storageSql"
import { checkDomain, checkNumber } from '@/lib/utils/commonutil'
import type { Website } from "@/types";
const { user  } = Astro.locals;
if (user === null) {
  return Astro.redirect("/login");
}
const { MY_DB } = Astro.locals.runtime.env;

interface FormDataValues {
  domain?: string;
  pathTemplate?: string;
  cdnDomain?: string;
  storageConfigId?: number;
}

const website = await websiteSql.selectWebsiteByUserIdSql(MY_DB, user.id);
let formDataValues: FormDataValues = {};

const storageConfigs = await storageSql.selectAllStorageByUserIdSql(MY_DB, user.id);
const errors = { domain: "", cdnDomain: "", pathTemplate: "", storageConfigId: "" };

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  formDataValues = Object.fromEntries(formData);
  const storageConfigId = formData.get("storageConfigId") as string;
  if (!storageConfigId || !checkNumber(storageConfigId as string)) {
    errors.storageConfigId += "Storage Config is required.";
  }
  const domain = formData.get("domain") as string;
  if (typeof domain !== "string" || domain.length < 1) {
    errors.domain += "Domain is required.";
  }
  if (!checkDomain(domain)) {
    errors.domain += "Domain is invalid.";
  }
  const cdnDomain = formData.get("cdnDomain") as string;
  let pathTemplate = formData.get("pathTemplate") as string;
  if (typeof pathTemplate !== "string" || pathTemplate.length < 1) {
    errors.pathTemplate += "pathTemplate is required.";
  }
  if (pathTemplate.startsWith("/")) {
    pathTemplate = pathTemplate.substring(1);
  }
  
  
  try {
    const hasErrors = Object.values(errors).some(msg => msg)
    if (!hasErrors) {
      if (website === null) {
        const newWebsite: Website = {
          userId: user.id,
          storageId: Number(storageConfigId),
          domain: domain,
          cdnDomain: cdnDomain,
          pathTemplate: pathTemplate,
        }
        await websiteSql.insertWebsiteSql(MY_DB,newWebsite);
      }else {
        const updateWebsite: Website = {
          id: website.id,
          userId: user.id,
          storageId: Number(storageConfigId),
          domain: domain,
          cdnDomain: cdnDomain,
          pathTemplate: pathTemplate,
        }
        await websiteSql.updateWebsiteSql(MY_DB, updateWebsite);
      }
      return Astro.redirect("/admin/website");
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}

---

<AdminLayout title="ImgUU Admin">
  <form method="post">
    <div class="space-y-12 mx-auto max-w-7xl">
      <div class="border-b border-white/10 pb-12">
        <h2 class="text-base font-semibold leading-7 text-white">
          WebsiteConfig
        </h2>
  
        <div class="mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6">
          <div class="sm:col-span-4">
            <div class="mt-4">
              <div class="sm:col-span-4">
                <label  class="block text-sm font-medium leading-6 text-white">
                  Storage Config <span class="text-red-500">*</span>
                </label>
                <div class="mt-2">
                  <select name="storageConfigId" id="storageConfigId" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-indigo-600 ">
                    <option value="">Select a Storage Config</option>
                    {storageConfigs &&
                      storageConfigs.map((config) => (
                        <option selected={formDataValues.storageConfigId == config.id || website?.storage_id == config.id} value={config.id}>{config.bucket_name}</option>
                      ))}
                  </select>
                </div>
                {errors.storageConfigId && <p class="mt-2 text-sm text-red-500">{errors.storageConfigId}{formDataValues.storageConfigId}</p>}
              </div>
            </div>

            <div class="mt-4">
              <div class="sm:col-span-4">
                <label  class="block text-sm font-medium leading-6 text-white">
                  Domain<span class="text-red-500">*</span> 
                </label>
                <div class="mt-2">
                  <div class="flex rounded-md bg-white/5 ring-1 ring-inset ring-white/10 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-500">
                    <input type="text"  name="domain" id="domain" value={formDataValues.domain || website?.domain}
                      class="flex-1 border-0 bg-transparent py-1.5 pl-2 text-white focus:ring-0 sm:text-sm sm:leading-6"
                      placeholder="like https://example.com or http://example.com" required
                    />
                  </div>
                  {errors.domain && <p class="mt-2 text-sm text-red-500">{errors.domain}</p>}
                </div>
              </div>
            </div>
            <div class="mt-4">
              <div class="sm:col-span-4">
                <label  class="block text-sm font-medium leading-6 text-white">
                  Path Template <span class="text-red-500">*</span>
                </label>
                <div class="mt-2">
                  <div class="flex rounded-md bg-white/5 ring-1 ring-inset ring-white/10 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-500">
                    <input type="text"  name="pathTemplate" id="pathTemplate" value={formDataValues.pathTemplate || website?.path_template}
                      class="flex-1 border-0 bg-transparent py-1.5 pl-2 text-white focus:ring-0 sm:text-sm sm:leading-6"
                      placeholder="like: {year}/{month}/{day}/{md5}.{extName} or custom/{md5}.{extName}" required
                    />
                  </div>
                </div>
                {errors.pathTemplate && <p class="mt-2 text-sm text-red-500">{errors.pathTemplate}</p>}
              </div>
            </div>
            <div class="mt-4">
              <div class="sm:col-span-4">
                <label  class="block text-sm font-medium leading-6 text-white">
                  CDN Template
                </label>
                <div class="mt-2">
                  <div class="flex rounded-md bg-white/5 ring-1 ring-inset ring-white/10 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-500">
                    <input type="text"  name="cdnDomain" id="cdnDomain" value={formDataValues.cdnDomain ||website?.cdn_domain}
                      class="flex-1 border-0 bg-transparent py-1.5 pl-2 text-white focus:ring-0 sm:text-sm sm:leading-6"
                      placeholder="like: https://cdn.example.com/{year}/{month}/{day}/{md5}.{extName}"
                    />
                  </div>
                </div>
                {errors.cdnDomain && <p class="mt-2 text-sm text-red-500">{errors.cdnDomain}</p>}
              </div>
            </div>
            <div class="mt-6 flex items-center justify-end gap-x-6">
              <button type="submit" class="rounded-md bg-indigo-500 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-500">
                Save
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </form>  
</AdminLayout>
